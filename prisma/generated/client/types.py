# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']

MetricsFormat = Literal['json', 'prometheus']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
            },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
            },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
            },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
            },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _int
    name: Optional[_str]


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: _str
    password: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _int
    name: Optional[_str]


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: _str
    password: _str


class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]


_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    email: _str
    password: _str
    name: Optional[_str]


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    email: _str
    password: _str
    name: Optional[_str]


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserCreateOrConnectWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserCreateOrConnectWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_email_OrderByInput',
    '_User_password_OrderByInput',
    '_User_name_OrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class JobIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive1']


class JobIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive2']


class JobIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive3']


class JobIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive4']


class JobIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class JobArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'JobIncludeFromJobRecursive1'


class JobArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'JobIncludeFromJobRecursive2'


class JobArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'JobIncludeFromJobRecursive3'


class JobArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'JobIncludeFromJobRecursive4'


class JobArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyJobArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive1'


class FindManyJobArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive2'


class FindManyJobArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive3'


class FindManyJobArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive4'


class FindManyJobArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    
    

class CompanyIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    jobs: Union[bool, 'FindManyJobArgsFromUserRecursive1']


class CompanyIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    jobs: Union[bool, 'FindManyJobArgsFromUserRecursive2']


class CompanyIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    jobs: Union[bool, 'FindManyJobArgsFromUserRecursive3']


class CompanyIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    jobs: Union[bool, 'FindManyJobArgsFromUserRecursive4']


class CompanyIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class CompanyArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCompanyArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _int
    email: _str
    password: _str
    name: _str
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""
    id: float


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""
    id: _int


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _int
    email: _str
    password: _str
    name: _str


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    email: bool
    password: bool
    name: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    email: bool
    password: bool
    name: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""
    id: bool


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'email': bool,
        'password': bool,
        'name': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'email': int,
        'password': int,
        'name': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'email',
    'password',
    'name',
]
UserScalarFieldKeys = Literal[
    'id',
    'email',
    'password',
    'name',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = _NoneType

# Job types

class JobOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Job create method"""
    id: _int
    publishedDate: datetime.datetime
    company: 'CompanyCreateNestedWithoutRelationsInput'
    companyId: _int


class JobCreateInput(JobOptionalCreateInput):
    """Required arguments to the Job create method"""
    title: _str
    location: _str
    employmentType: _str
    salaryRange: _str
    description: _str
    responsibilities: _str
    qualifications: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class JobOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Job create method, without relations"""
    id: _int
    publishedDate: datetime.datetime
    companyId: _int


class JobCreateWithoutRelationsInput(JobOptionalCreateWithoutRelationsInput):
    """Required arguments to the Job create method, without relations"""
    title: _str
    location: _str
    employmentType: _str
    salaryRange: _str
    description: _str
    responsibilities: _str
    qualifications: _str


class JobCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'JobCreateWithoutRelationsInput'
    connect: 'JobWhereUniqueInput'


class JobCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['JobCreateWithoutRelationsInput', List['JobCreateWithoutRelationsInput']]
    connect: Union['JobWhereUniqueInput', List['JobWhereUniqueInput']]


_JobWhereUnique_id_Input = TypedDict(
    '_JobWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

JobWhereUniqueInput = _JobWhereUnique_id_Input


class JobUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    title: _str
    location: _str
    employmentType: _str
    salaryRange: _str
    description: _str
    responsibilities: _str
    qualifications: _str
    publishedDate: datetime.datetime
    company: 'CompanyUpdateOneWithoutRelationsInput'


class JobUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    title: _str
    location: _str
    employmentType: _str
    salaryRange: _str
    description: _str
    responsibilities: _str
    qualifications: _str
    publishedDate: datetime.datetime


class JobUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['JobCreateWithoutRelationsInput']
    connect: List['JobWhereUniqueInput']
    set: List['JobWhereUniqueInput']
    disconnect: List['JobWhereUniqueInput']
    delete: List['JobWhereUniqueInput']

    # TODO
    # update: List['JobUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['JobUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['JobScalarWhereInput']
    # upsert: List['JobUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['JobCreateOrConnectWithoutRelationsInput']


class JobUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'JobCreateWithoutRelationsInput'
    connect: 'JobWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'JobUpdateInput'
    # upsert: 'JobUpsertWithoutRelationsInput'
    # connectOrCreate: 'JobCreateOrConnectWithoutRelationsInput'


class JobUpsertInput(TypedDict):
    create: 'JobCreateInput'
    update: 'JobUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Job_id_OrderByInput = TypedDict(
    '_Job_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Job_title_OrderByInput = TypedDict(
    '_Job_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Job_location_OrderByInput = TypedDict(
    '_Job_location_OrderByInput',
    {
        'location': 'SortOrder',
    },
    total=True
)

_Job_employmentType_OrderByInput = TypedDict(
    '_Job_employmentType_OrderByInput',
    {
        'employmentType': 'SortOrder',
    },
    total=True
)

_Job_salaryRange_OrderByInput = TypedDict(
    '_Job_salaryRange_OrderByInput',
    {
        'salaryRange': 'SortOrder',
    },
    total=True
)

_Job_description_OrderByInput = TypedDict(
    '_Job_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Job_responsibilities_OrderByInput = TypedDict(
    '_Job_responsibilities_OrderByInput',
    {
        'responsibilities': 'SortOrder',
    },
    total=True
)

_Job_qualifications_OrderByInput = TypedDict(
    '_Job_qualifications_OrderByInput',
    {
        'qualifications': 'SortOrder',
    },
    total=True
)

_Job_publishedDate_OrderByInput = TypedDict(
    '_Job_publishedDate_OrderByInput',
    {
        'publishedDate': 'SortOrder',
    },
    total=True
)

_Job_companyId_OrderByInput = TypedDict(
    '_Job_companyId_OrderByInput',
    {
        'companyId': 'SortOrder',
    },
    total=True
)

JobOrderByInput = Union[
    '_Job_id_OrderByInput',
    '_Job_title_OrderByInput',
    '_Job_location_OrderByInput',
    '_Job_employmentType_OrderByInput',
    '_Job_salaryRange_OrderByInput',
    '_Job_description_OrderByInput',
    '_Job_responsibilities_OrderByInput',
    '_Job_qualifications_OrderByInput',
    '_Job_publishedDate_OrderByInput',
    '_Job_companyId_OrderByInput',
]



# recursive Job types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

JobRelationFilter = TypedDict(
    'JobRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class JobListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class JobInclude(TypedDict, total=False):
    """Job relational arguments"""
    company: Union[bool, 'CompanyArgsFromJob']


    

class UserIncludeFromJob(TypedDict, total=False):
    """Relational arguments for Job"""


class UserIncludeFromJobRecursive1(TypedDict, total=False):
    """Relational arguments for Job"""


class UserIncludeFromJobRecursive2(TypedDict, total=False):
    """Relational arguments for Job"""


class UserIncludeFromJobRecursive3(TypedDict, total=False):
    """Relational arguments for Job"""


class UserIncludeFromJobRecursive4(TypedDict, total=False):
    """Relational arguments for Job"""

    

class UserArgsFromJob(TypedDict, total=False):
    """Arguments for Job"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromJobRecursive1(TypedDict, total=False):
    """Arguments for Job"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromJobRecursive2(TypedDict, total=False):
    """Arguments for Job"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromJobRecursive3(TypedDict, total=False):
    """Arguments for Job"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromJobRecursive4(TypedDict, total=False):
    """Arguments for Job"""
    
    

class FindManyUserArgsFromJob(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromJobRecursive1(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromJobRecursive2(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromJobRecursive3(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromJobRecursive4(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class JobIncludeFromJob(TypedDict, total=False):
    """Relational arguments for Job"""
    company: Union[bool, 'CompanyArgsFromJobRecursive1']


class JobIncludeFromJobRecursive1(TypedDict, total=False):
    """Relational arguments for Job"""
    company: Union[bool, 'CompanyArgsFromJobRecursive2']


class JobIncludeFromJobRecursive2(TypedDict, total=False):
    """Relational arguments for Job"""
    company: Union[bool, 'CompanyArgsFromJobRecursive3']


class JobIncludeFromJobRecursive3(TypedDict, total=False):
    """Relational arguments for Job"""
    company: Union[bool, 'CompanyArgsFromJobRecursive4']


class JobIncludeFromJobRecursive4(TypedDict, total=False):
    """Relational arguments for Job"""

    

class JobArgsFromJob(TypedDict, total=False):
    """Arguments for Job"""
    include: 'JobIncludeFromJobRecursive1'


class JobArgsFromJobRecursive1(TypedDict, total=False):
    """Arguments for Job"""
    include: 'JobIncludeFromJobRecursive2'


class JobArgsFromJobRecursive2(TypedDict, total=False):
    """Arguments for Job"""
    include: 'JobIncludeFromJobRecursive3'


class JobArgsFromJobRecursive3(TypedDict, total=False):
    """Arguments for Job"""
    include: 'JobIncludeFromJobRecursive4'


class JobArgsFromJobRecursive4(TypedDict, total=False):
    """Arguments for Job"""
    
    

class FindManyJobArgsFromJob(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive1'


class FindManyJobArgsFromJobRecursive1(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive2'


class FindManyJobArgsFromJobRecursive2(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive3'


class FindManyJobArgsFromJobRecursive3(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive4'


class FindManyJobArgsFromJobRecursive4(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    
    

class CompanyIncludeFromJob(TypedDict, total=False):
    """Relational arguments for Job"""
    jobs: Union[bool, 'FindManyJobArgsFromJobRecursive1']


class CompanyIncludeFromJobRecursive1(TypedDict, total=False):
    """Relational arguments for Job"""
    jobs: Union[bool, 'FindManyJobArgsFromJobRecursive2']


class CompanyIncludeFromJobRecursive2(TypedDict, total=False):
    """Relational arguments for Job"""
    jobs: Union[bool, 'FindManyJobArgsFromJobRecursive3']


class CompanyIncludeFromJobRecursive3(TypedDict, total=False):
    """Relational arguments for Job"""
    jobs: Union[bool, 'FindManyJobArgsFromJobRecursive4']


class CompanyIncludeFromJobRecursive4(TypedDict, total=False):
    """Relational arguments for Job"""

    

class CompanyArgsFromJob(TypedDict, total=False):
    """Arguments for Job"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromJobRecursive1(TypedDict, total=False):
    """Arguments for Job"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromJobRecursive2(TypedDict, total=False):
    """Arguments for Job"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromJobRecursive3(TypedDict, total=False):
    """Arguments for Job"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromJobRecursive4(TypedDict, total=False):
    """Arguments for Job"""
    
    

class FindManyCompanyArgsFromJob(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromJobRecursive1(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromJobRecursive2(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromJobRecursive3(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromJobRecursive4(TypedDict, total=False):
    """Arguments for Job"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    


FindManyJobArgs = FindManyJobArgsFromJob
FindFirstJobArgs = FindManyJobArgsFromJob


    

class JobWhereInput(TypedDict, total=False):
    """Job arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    location: Union[_str, 'types.StringFilter']
    employmentType: Union[_str, 'types.StringFilter']
    salaryRange: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    responsibilities: Union[_str, 'types.StringFilter']
    qualifications: Union[_str, 'types.StringFilter']
    publishedDate: Union[datetime.datetime, 'types.DateTimeFilter']
    company: 'CompanyRelationFilter'
    companyId: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['JobWhereInputRecursive1', List['JobWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['JobWhereInputRecursive1']
    OR: List['JobWhereInputRecursive1']
    NOT: List['JobWhereInputRecursive1']


class JobWhereInputRecursive1(TypedDict, total=False):
    """Job arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    location: Union[_str, 'types.StringFilter']
    employmentType: Union[_str, 'types.StringFilter']
    salaryRange: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    responsibilities: Union[_str, 'types.StringFilter']
    qualifications: Union[_str, 'types.StringFilter']
    publishedDate: Union[datetime.datetime, 'types.DateTimeFilter']
    company: 'CompanyRelationFilter'
    companyId: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['JobWhereInputRecursive2', List['JobWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['JobWhereInputRecursive2']
    OR: List['JobWhereInputRecursive2']
    NOT: List['JobWhereInputRecursive2']


class JobWhereInputRecursive2(TypedDict, total=False):
    """Job arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    location: Union[_str, 'types.StringFilter']
    employmentType: Union[_str, 'types.StringFilter']
    salaryRange: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    responsibilities: Union[_str, 'types.StringFilter']
    qualifications: Union[_str, 'types.StringFilter']
    publishedDate: Union[datetime.datetime, 'types.DateTimeFilter']
    company: 'CompanyRelationFilter'
    companyId: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['JobWhereInputRecursive3', List['JobWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['JobWhereInputRecursive3']
    OR: List['JobWhereInputRecursive3']
    NOT: List['JobWhereInputRecursive3']


class JobWhereInputRecursive3(TypedDict, total=False):
    """Job arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    location: Union[_str, 'types.StringFilter']
    employmentType: Union[_str, 'types.StringFilter']
    salaryRange: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    responsibilities: Union[_str, 'types.StringFilter']
    qualifications: Union[_str, 'types.StringFilter']
    publishedDate: Union[datetime.datetime, 'types.DateTimeFilter']
    company: 'CompanyRelationFilter'
    companyId: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['JobWhereInputRecursive4', List['JobWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['JobWhereInputRecursive4']
    OR: List['JobWhereInputRecursive4']
    NOT: List['JobWhereInputRecursive4']


class JobWhereInputRecursive4(TypedDict, total=False):
    """Job arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    location: Union[_str, 'types.StringFilter']
    employmentType: Union[_str, 'types.StringFilter']
    salaryRange: Union[_str, 'types.StringFilter']
    description: Union[_str, 'types.StringFilter']
    responsibilities: Union[_str, 'types.StringFilter']
    qualifications: Union[_str, 'types.StringFilter']
    publishedDate: Union[datetime.datetime, 'types.DateTimeFilter']
    company: 'CompanyRelationFilter'
    companyId: Union[_int, 'types.IntFilter']



# aggregate Job types


    

class JobScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Job arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    employmentType: Union[_str, 'types.StringWithAggregatesFilter']
    salaryRange: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    responsibilities: Union[_str, 'types.StringWithAggregatesFilter']
    qualifications: Union[_str, 'types.StringWithAggregatesFilter']
    publishedDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    companyId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['JobScalarWhereWithAggregatesInputRecursive1']
    OR: List['JobScalarWhereWithAggregatesInputRecursive1']
    NOT: List['JobScalarWhereWithAggregatesInputRecursive1']


class JobScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Job arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    employmentType: Union[_str, 'types.StringWithAggregatesFilter']
    salaryRange: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    responsibilities: Union[_str, 'types.StringWithAggregatesFilter']
    qualifications: Union[_str, 'types.StringWithAggregatesFilter']
    publishedDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    companyId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['JobScalarWhereWithAggregatesInputRecursive2']
    OR: List['JobScalarWhereWithAggregatesInputRecursive2']
    NOT: List['JobScalarWhereWithAggregatesInputRecursive2']


class JobScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Job arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    employmentType: Union[_str, 'types.StringWithAggregatesFilter']
    salaryRange: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    responsibilities: Union[_str, 'types.StringWithAggregatesFilter']
    qualifications: Union[_str, 'types.StringWithAggregatesFilter']
    publishedDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    companyId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['JobScalarWhereWithAggregatesInputRecursive3']
    OR: List['JobScalarWhereWithAggregatesInputRecursive3']
    NOT: List['JobScalarWhereWithAggregatesInputRecursive3']


class JobScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Job arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    employmentType: Union[_str, 'types.StringWithAggregatesFilter']
    salaryRange: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    responsibilities: Union[_str, 'types.StringWithAggregatesFilter']
    qualifications: Union[_str, 'types.StringWithAggregatesFilter']
    publishedDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    companyId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['JobScalarWhereWithAggregatesInputRecursive4']
    OR: List['JobScalarWhereWithAggregatesInputRecursive4']
    NOT: List['JobScalarWhereWithAggregatesInputRecursive4']


class JobScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Job arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    location: Union[_str, 'types.StringWithAggregatesFilter']
    employmentType: Union[_str, 'types.StringWithAggregatesFilter']
    salaryRange: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    responsibilities: Union[_str, 'types.StringWithAggregatesFilter']
    qualifications: Union[_str, 'types.StringWithAggregatesFilter']
    publishedDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    companyId: Union[_int, 'types.IntWithAggregatesFilter']



class JobGroupByOutput(TypedDict, total=False):
    id: _int
    title: _str
    location: _str
    employmentType: _str
    salaryRange: _str
    description: _str
    responsibilities: _str
    qualifications: _str
    publishedDate: datetime.datetime
    companyId: _int
    _sum: 'JobSumAggregateOutput'
    _avg: 'JobAvgAggregateOutput'
    _min: 'JobMinAggregateOutput'
    _max: 'JobMaxAggregateOutput'
    _count: 'JobCountAggregateOutput'


class JobAvgAggregateOutput(TypedDict, total=False):
    """Job output for aggregating averages"""
    id: float
    companyId: float


class JobSumAggregateOutput(TypedDict, total=False):
    """Job output for aggregating sums"""
    id: _int
    companyId: _int


class JobScalarAggregateOutput(TypedDict, total=False):
    """Job output including scalar fields"""
    id: _int
    title: _str
    location: _str
    employmentType: _str
    salaryRange: _str
    description: _str
    responsibilities: _str
    qualifications: _str
    publishedDate: datetime.datetime
    companyId: _int


JobMinAggregateOutput = JobScalarAggregateOutput
JobMaxAggregateOutput = JobScalarAggregateOutput


class JobMaxAggregateInput(TypedDict, total=False):
    """Job input for aggregating by max"""
    id: bool
    title: bool
    location: bool
    employmentType: bool
    salaryRange: bool
    description: bool
    responsibilities: bool
    qualifications: bool
    publishedDate: bool
    companyId: bool


class JobMinAggregateInput(TypedDict, total=False):
    """Job input for aggregating by min"""
    id: bool
    title: bool
    location: bool
    employmentType: bool
    salaryRange: bool
    description: bool
    responsibilities: bool
    qualifications: bool
    publishedDate: bool
    companyId: bool


class JobNumberAggregateInput(TypedDict, total=False):
    """Job input for aggregating numbers"""
    id: bool
    companyId: bool


JobAvgAggregateInput = JobNumberAggregateInput
JobSumAggregateInput = JobNumberAggregateInput


JobCountAggregateInput = TypedDict(
    'JobCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'location': bool,
        'employmentType': bool,
        'salaryRange': bool,
        'description': bool,
        'responsibilities': bool,
        'qualifications': bool,
        'publishedDate': bool,
        'companyId': bool,
        '_all': bool,
    },
    total=False,
)

JobCountAggregateOutput = TypedDict(
    'JobCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'location': int,
        'employmentType': int,
        'salaryRange': int,
        'description': int,
        'responsibilities': int,
        'qualifications': int,
        'publishedDate': int,
        'companyId': int,
        '_all': int,
    },
    total=False,
)


JobKeys = Literal[
    'id',
    'title',
    'location',
    'employmentType',
    'salaryRange',
    'description',
    'responsibilities',
    'qualifications',
    'publishedDate',
    'company',
    'companyId',
]
JobScalarFieldKeys = Literal[
    'id',
    'title',
    'location',
    'employmentType',
    'salaryRange',
    'description',
    'responsibilities',
    'qualifications',
    'publishedDate',
    'companyId',
]
JobScalarFieldKeysT = TypeVar('JobScalarFieldKeysT', bound=JobScalarFieldKeys)

JobRelationalFieldKeys = Literal[
        'company',
    ]

# Company types

class CompanyOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Company create method"""
    id: _int
    logo: Optional[_str]
    companyDetail: Optional[_str]
    jobs: 'JobCreateManyNestedWithoutRelationsInput'


class CompanyCreateInput(CompanyOptionalCreateInput):
    """Required arguments to the Company create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CompanyOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Company create method, without relations"""
    id: _int
    logo: Optional[_str]
    companyDetail: Optional[_str]


class CompanyCreateWithoutRelationsInput(CompanyOptionalCreateWithoutRelationsInput):
    """Required arguments to the Company create method, without relations"""
    name: _str


class CompanyCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CompanyCreateWithoutRelationsInput'
    connect: 'CompanyWhereUniqueInput'


class CompanyCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CompanyCreateWithoutRelationsInput', List['CompanyCreateWithoutRelationsInput']]
    connect: Union['CompanyWhereUniqueInput', List['CompanyWhereUniqueInput']]


_CompanyWhereUnique_id_Input = TypedDict(
    '_CompanyWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

CompanyWhereUniqueInput = _CompanyWhereUnique_id_Input


class CompanyUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    name: _str
    logo: Optional[_str]
    companyDetail: Optional[_str]
    jobs: 'JobUpdateManyWithoutRelationsInput'


class CompanyUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    name: _str
    logo: Optional[_str]
    companyDetail: Optional[_str]


class CompanyUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CompanyCreateWithoutRelationsInput']
    connect: List['CompanyWhereUniqueInput']
    set: List['CompanyWhereUniqueInput']
    disconnect: List['CompanyWhereUniqueInput']
    delete: List['CompanyWhereUniqueInput']

    # TODO
    # update: List['CompanyUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CompanyUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CompanyScalarWhereInput']
    # upsert: List['CompanyUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['CompanyCreateOrConnectWithoutRelationsInput']


class CompanyUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CompanyCreateWithoutRelationsInput'
    connect: 'CompanyWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CompanyUpdateInput'
    # upsert: 'CompanyUpsertWithoutRelationsInput'
    # connectOrCreate: 'CompanyCreateOrConnectWithoutRelationsInput'


class CompanyUpsertInput(TypedDict):
    create: 'CompanyCreateInput'
    update: 'CompanyUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Company_id_OrderByInput = TypedDict(
    '_Company_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Company_name_OrderByInput = TypedDict(
    '_Company_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Company_logo_OrderByInput = TypedDict(
    '_Company_logo_OrderByInput',
    {
        'logo': 'SortOrder',
    },
    total=True
)

_Company_companyDetail_OrderByInput = TypedDict(
    '_Company_companyDetail_OrderByInput',
    {
        'companyDetail': 'SortOrder',
    },
    total=True
)

CompanyOrderByInput = Union[
    '_Company_id_OrderByInput',
    '_Company_name_OrderByInput',
    '_Company_logo_OrderByInput',
    '_Company_companyDetail_OrderByInput',
]



# recursive Company types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CompanyRelationFilter = TypedDict(
    'CompanyRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CompanyListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CompanyInclude(TypedDict, total=False):
    """Company relational arguments"""
    jobs: Union[bool, 'FindManyJobArgsFromCompany']


    

class UserIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""


class UserIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""


class UserIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""


class UserIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""


class UserIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class UserArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyUserArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class JobIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive1']


class JobIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive2']


class JobIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive3']


class JobIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive4']


class JobIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class JobArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'JobIncludeFromJobRecursive1'


class JobArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'JobIncludeFromJobRecursive2'


class JobArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'JobIncludeFromJobRecursive3'


class JobArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'JobIncludeFromJobRecursive4'


class JobArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyJobArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive1'


class FindManyJobArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive2'


class FindManyJobArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive3'


class FindManyJobArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    include: 'JobIncludeFromJobRecursive4'


class FindManyJobArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['JobOrderByInput', List['JobOrderByInput']]
    where: 'JobWhereInput'
    cursor: 'JobWhereUniqueInput'
    distinct: List['JobScalarFieldKeys']
    
    

class CompanyIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    jobs: Union[bool, 'FindManyJobArgsFromCompanyRecursive1']


class CompanyIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    jobs: Union[bool, 'FindManyJobArgsFromCompanyRecursive2']


class CompanyIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    jobs: Union[bool, 'FindManyJobArgsFromCompanyRecursive3']


class CompanyIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    jobs: Union[bool, 'FindManyJobArgsFromCompanyRecursive4']


class CompanyIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class CompanyArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyCompanyArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    


FindManyCompanyArgs = FindManyCompanyArgsFromCompany
FindFirstCompanyArgs = FindManyCompanyArgsFromCompany


    

class CompanyWhereInput(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    logo: Union[None, _str, 'types.StringFilter']
    companyDetail: Union[None, _str, 'types.StringFilter']
    jobs: 'JobListRelationFilter'

    # should be noted that AND and NOT should be Union['CompanyWhereInputRecursive1', List['CompanyWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CompanyWhereInputRecursive1']
    OR: List['CompanyWhereInputRecursive1']
    NOT: List['CompanyWhereInputRecursive1']


class CompanyWhereInputRecursive1(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    logo: Union[None, _str, 'types.StringFilter']
    companyDetail: Union[None, _str, 'types.StringFilter']
    jobs: 'JobListRelationFilter'

    # should be noted that AND and NOT should be Union['CompanyWhereInputRecursive2', List['CompanyWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CompanyWhereInputRecursive2']
    OR: List['CompanyWhereInputRecursive2']
    NOT: List['CompanyWhereInputRecursive2']


class CompanyWhereInputRecursive2(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    logo: Union[None, _str, 'types.StringFilter']
    companyDetail: Union[None, _str, 'types.StringFilter']
    jobs: 'JobListRelationFilter'

    # should be noted that AND and NOT should be Union['CompanyWhereInputRecursive3', List['CompanyWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CompanyWhereInputRecursive3']
    OR: List['CompanyWhereInputRecursive3']
    NOT: List['CompanyWhereInputRecursive3']


class CompanyWhereInputRecursive3(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    logo: Union[None, _str, 'types.StringFilter']
    companyDetail: Union[None, _str, 'types.StringFilter']
    jobs: 'JobListRelationFilter'

    # should be noted that AND and NOT should be Union['CompanyWhereInputRecursive4', List['CompanyWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CompanyWhereInputRecursive4']
    OR: List['CompanyWhereInputRecursive4']
    NOT: List['CompanyWhereInputRecursive4']


class CompanyWhereInputRecursive4(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    logo: Union[None, _str, 'types.StringFilter']
    companyDetail: Union[None, _str, 'types.StringFilter']
    jobs: 'JobListRelationFilter'



# aggregate Company types


    

class CompanyScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    logo: Union[_str, 'types.StringWithAggregatesFilter']
    companyDetail: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CompanyScalarWhereWithAggregatesInputRecursive1']
    OR: List['CompanyScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CompanyScalarWhereWithAggregatesInputRecursive1']


class CompanyScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    logo: Union[_str, 'types.StringWithAggregatesFilter']
    companyDetail: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CompanyScalarWhereWithAggregatesInputRecursive2']
    OR: List['CompanyScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CompanyScalarWhereWithAggregatesInputRecursive2']


class CompanyScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    logo: Union[_str, 'types.StringWithAggregatesFilter']
    companyDetail: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CompanyScalarWhereWithAggregatesInputRecursive3']
    OR: List['CompanyScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CompanyScalarWhereWithAggregatesInputRecursive3']


class CompanyScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    logo: Union[_str, 'types.StringWithAggregatesFilter']
    companyDetail: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CompanyScalarWhereWithAggregatesInputRecursive4']
    OR: List['CompanyScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CompanyScalarWhereWithAggregatesInputRecursive4']


class CompanyScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    logo: Union[_str, 'types.StringWithAggregatesFilter']
    companyDetail: Union[_str, 'types.StringWithAggregatesFilter']



class CompanyGroupByOutput(TypedDict, total=False):
    id: _int
    name: _str
    logo: _str
    companyDetail: _str
    _sum: 'CompanySumAggregateOutput'
    _avg: 'CompanyAvgAggregateOutput'
    _min: 'CompanyMinAggregateOutput'
    _max: 'CompanyMaxAggregateOutput'
    _count: 'CompanyCountAggregateOutput'


class CompanyAvgAggregateOutput(TypedDict, total=False):
    """Company output for aggregating averages"""
    id: float


class CompanySumAggregateOutput(TypedDict, total=False):
    """Company output for aggregating sums"""
    id: _int


class CompanyScalarAggregateOutput(TypedDict, total=False):
    """Company output including scalar fields"""
    id: _int
    name: _str
    logo: _str
    companyDetail: _str


CompanyMinAggregateOutput = CompanyScalarAggregateOutput
CompanyMaxAggregateOutput = CompanyScalarAggregateOutput


class CompanyMaxAggregateInput(TypedDict, total=False):
    """Company input for aggregating by max"""
    id: bool
    name: bool
    logo: bool
    companyDetail: bool


class CompanyMinAggregateInput(TypedDict, total=False):
    """Company input for aggregating by min"""
    id: bool
    name: bool
    logo: bool
    companyDetail: bool


class CompanyNumberAggregateInput(TypedDict, total=False):
    """Company input for aggregating numbers"""
    id: bool


CompanyAvgAggregateInput = CompanyNumberAggregateInput
CompanySumAggregateInput = CompanyNumberAggregateInput


CompanyCountAggregateInput = TypedDict(
    'CompanyCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'logo': bool,
        'companyDetail': bool,
        '_all': bool,
    },
    total=False,
)

CompanyCountAggregateOutput = TypedDict(
    'CompanyCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'logo': int,
        'companyDetail': int,
        '_all': int,
    },
    total=False,
)


CompanyKeys = Literal[
    'id',
    'name',
    'logo',
    'companyDetail',
    'jobs',
]
CompanyScalarFieldKeys = Literal[
    'id',
    'name',
    'logo',
    'companyDetail',
]
CompanyScalarFieldKeysT = TypeVar('CompanyScalarFieldKeysT', bound=CompanyScalarFieldKeys)

CompanyRelationalFieldKeys = Literal[
        'jobs',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields